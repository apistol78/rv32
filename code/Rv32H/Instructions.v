// This file is automatically generated, DO NOT EDIT!
// ==================================================

// ADD
if ((instruction & 32'hfe00707f) == 32'h00000033) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) + $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
end

// ADDI
else if ((instruction & 32'h0000707f) == 32'h00000013) begin
				r[inst_I_rd] <= $signed(r[inst_I_rs1]) + $signed(inst_I_imm);
				`DECODE_DONE;
			
end

// ADDIW
else if ((instruction & 32'h0000707f) == 32'h0000001b) begin
				r[inst_I_rd] <= r[inst_I_rs1] + inst_I_imm;
				`DECODE_DONE;
			
end

// ADDW
else if ((instruction & 32'hfe00707f) == 32'h0000003b) begin
				r[inst_R_rd] <= r[inst_R_rs1] + r[inst_R_rs2];
				`DECODE_DONE;
			
end

// AMOADD.D
else if ((instruction & 32'hf800707f) == 32'h0000302f) begin
end

// AMOADD.W
else if ((instruction & 32'hf800707f) == 32'h0000202f) begin
end

// AMOAND.D
else if ((instruction & 32'hf800707f) == 32'h6000302f) begin
end

// AMOAND.W
else if ((instruction & 32'hf800707f) == 32'h6000202f) begin
end

// AMOMAXU.D
else if ((instruction & 32'hf800707f) == 32'he000302f) begin
end

// AMOMAXU.W
else if ((instruction & 32'hf800707f) == 32'he000202f) begin
end

// AMOOR.D
else if ((instruction & 32'hf800707f) == 32'h4000302f) begin
end

// AMOOR.W
else if ((instruction & 32'hf800707f) == 32'h4000202f) begin
end

// AMOSWAP.D
else if ((instruction & 32'hf800707f) == 32'h0800302f) begin
end

// AMOSWAP.W
else if ((instruction & 32'hf800707f) == 32'h0800202f) begin
end

// AND
else if ((instruction & 32'hfe00707f) == 32'h00007033) begin
				r[inst_R_rd] <= r[inst_R_rs1] & r[inst_R_rs2];
				`DECODE_DONE;
			
end

// ANDI
else if ((instruction & 32'h0000707f) == 32'h00007013) begin
				r[inst_I_rd] <= r[inst_I_rs1] & inst_I_imm;
				`DECODE_DONE;
			
end

// AUIPC
else if ((instruction & 32'h0000007f) == 32'h00000017) begin
				r[inst_U_rd] <= $signed(pc) + $signed(inst_U_imm);
				`DECODE_DONE;
			
end

// BEQ
else if ((instruction & 32'h0000707f) == 32'h00000063) begin
				if (r[inst_B_rs1] == r[inst_B_rs2])
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// BGE
else if ((instruction & 32'h0000707f) == 32'h00005063) begin
				if ($signed(r[inst_B_rs1]) >= $signed(r[inst_B_rs2]))
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// BGEU
else if ((instruction & 32'h0000707f) == 32'h00007063) begin
				if (r[inst_B_rs1] >= r[inst_B_rs2])
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// BLT
else if ((instruction & 32'h0000707f) == 32'h00004063) begin
				if ($signed(r[inst_B_rs1]) < $signed(r[inst_B_rs2]))
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// BLTU
else if ((instruction & 32'h0000707f) == 32'h00006063) begin
				if (r[inst_B_rs1] < r[inst_B_rs2])
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// BNE
else if ((instruction & 32'h0000707f) == 32'h00001063) begin
				if (r[inst_B_rs1] != r[inst_B_rs2])
					pc_next <= $signed(pc) + $signed(inst_B_imm);
				`DECODE_DONE;
			
end

// CSRRC
else if ((instruction & 32'h0000707f) == 32'h00003073) begin
end

// CSRRCI
else if ((instruction & 32'h0000707f) == 32'h00007073) begin
end

// CSRRS
else if ((instruction & 32'h0000707f) == 32'h00002073) begin
end

// CSRRSI
else if ((instruction & 32'h0000707f) == 32'h00006073) begin
end

// CSRRW
else if ((instruction & 32'h0000707f) == 32'h00001073) begin
end

// CSRRWI
else if ((instruction & 32'h0000707f) == 32'h00005073) begin
end

// DIV
else if ((instruction & 32'hfe00707f) == 32'h02004033) begin
end

// DIVU
else if ((instruction & 32'hfe00707f) == 32'h02005033) begin
end

// DIVUW
else if ((instruction & 32'hfe00707f) == 32'h0200503b) begin
end

// DIVW
else if ((instruction & 32'hfe00707f) == 32'h0200403b) begin
end

// EBREAK
else if ((instruction & 32'hffffffff) == 32'h00100073) begin
end

// ECALL
else if ((instruction & 32'hffffffff) == 32'h00000073) begin
end

// FADD.D
else if ((instruction & 32'hfe00007f) == 32'h02000053) begin
end

// FCVT.D.L
else if ((instruction & 32'hfff0007f) == 32'hd2200053) begin
end

// FCVT.D.S
else if ((instruction & 32'hfff0007f) == 32'h42000053) begin
end

// FCVT.D.W
else if ((instruction & 32'hfff0007f) == 32'hd2000053) begin
end

// FCVT.D.WU
else if ((instruction & 32'hfff0007f) == 32'hd2100053) begin
end

// FCVT.S.D
else if ((instruction & 32'hfff0007f) == 32'h40100053) begin
end

// FCVT.W.D
else if ((instruction & 32'hfff0007f) == 32'hc2000053) begin
end

// FDIV.D
else if ((instruction & 32'hfe00007f) == 32'h1a000053) begin
end

// FENCE
else if ((instruction & 32'h0000707f) == 32'h0000000f) begin
end

// FENCE.I
else if ((instruction & 32'h0000707f) == 32'h0000100f) begin
end

// FEQ.D
else if ((instruction & 32'hfe00707f) == 32'ha2002053) begin
end

// FLD
else if ((instruction & 32'h0000707f) == 32'h00003007) begin
end

// FLE.D
else if ((instruction & 32'hfe00707f) == 32'ha2000053) begin
end

// FLT.D
else if ((instruction & 32'hfe00707f) == 32'ha2001053) begin
end

// FLW
else if ((instruction & 32'h0000707f) == 32'h00002007) begin
end

// FMADD.D
else if ((instruction & 32'h0600007f) == 32'h02000043) begin
end

// FMUL.D
else if ((instruction & 32'hfe00007f) == 32'h12000053) begin
end

// FMV.D.X
else if ((instruction & 32'hfff0707f) == 32'hf2000053) begin
end

// FMV.X.D
else if ((instruction & 32'hfff0707f) == 32'he2000053) begin
end

// FMV.X.W
else if ((instruction & 32'hfff0707f) == 32'he0000053) begin
end

// FMV.W.X
else if ((instruction & 32'hfff0707f) == 32'hf0000053) begin
end

// FNMSUB.D
else if ((instruction & 32'h0600007f) == 32'h0200004b) begin
end

// FSD
else if ((instruction & 32'h0000707f) == 32'h00003027) begin
end

// FSGNJ.D
else if ((instruction & 32'hfe00707f) == 32'h22000053) begin
end

// FSGNJX.D
else if ((instruction & 32'hfe00707f) == 32'h22002053) begin
end

// FSUB.D
else if ((instruction & 32'hfe00007f) == 32'h0a000053) begin
end

// FSW
else if ((instruction & 32'h0000707f) == 32'h00002027) begin
end

// JAL
else if ((instruction & 32'h0000007f) == 32'h0000006f) begin
				r[inst_J_rd] <= pc_next;
				pc_next <= $signed(pc) + $signed(inst_J_imm);
				`DECODE_DONE;
			
end

// JALR
else if ((instruction & 32'h0000707f) == 32'h00000067) begin
				r[inst_I_rd] <= pc_next;
				pc_next <= $signed(r[inst_I_rs1]) + $signed(inst_I_imm);
				`DECODE_DONE;
			
end

// LB
else if ((instruction & 32'h0000707f) == 32'h00000003) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tLOAD BYTE, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					o_address <= r[inst_I_rs1] + $signed(inst_I_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				// 2: wait until load finish.
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tLOAD BYTE, data => %x (%d)", i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { { 24{ i_data[7]  } }, i_data[6:0] };
							2'b01: r[inst_I_rd] <= { { 24{ i_data[15] } }, i_data[14:8] };
							2'b10: r[inst_I_rd] <= { { 24{ i_data[23] } }, i_data[22:16] };
							2'b11: r[inst_I_rd] <= { { 24{ i_data[31] } }, i_data[30:24] };
						endcase
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// LBU
else if ((instruction & 32'h0000707f) == 32'h00004003) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tLOAD UBYTE, address %x", r[inst_I_rs1] + $signed(inst_I_imm));
					o_address <= r[inst_I_rs1] + $signed(inst_I_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				// 2: wait until load finish.
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tLOAD UBYTE, data => %x (%d)", i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { 24'b0, i_data[7:0] };
							2'b01: r[inst_I_rd] <= { 24'b0, i_data[15:8] };
							2'b10: r[inst_I_rd] <= { 24'b0, i_data[23:16] };
							2'b11: r[inst_I_rd] <= { 24'b0, i_data[31:24] };
						endcase
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// LD
else if ((instruction & 32'h0000707f) == 32'h00003003) begin
end

// LH
else if ((instruction & 32'h0000707f) == 32'h00001003) begin
				if (decode_step == 0) begin
					// $display("\tLOAD SHALF, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					o_address <= r[inst_I_rs1] + $signed(inst_I_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tLOAD HALF, data => %x (%d)", i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { { 16{ i_data[15] } }, i_data[14:0] };
							2'b10: r[inst_I_rd] <= { { 16{ i_data[31] } }, i_data[30:16] };
						endcase
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// LHU
else if ((instruction & 32'h0000707f) == 32'h00005003) begin
				if (decode_step == 0) begin
					// $display("\tLOAD HALF, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					o_address <= r[inst_I_rs1] + $signed(inst_I_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tLOAD HALF, data => %x (%d)", i_data, address_byte);
						r[inst_I_rd] <= i_data[15:0];
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { 16'b0, i_data[15:0] };
							2'b10: r[inst_I_rd] <= { 16'b0, i_data[31:16] };
						endcase
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// LR.D
else if ((instruction & 32'hf9f0707f) == 32'h1000302f) begin
end

// LR.W
else if ((instruction & 32'hf9f0707f) == 32'h1000202f) begin
end

// LUI
else if ((instruction & 32'h0000007f) == 32'h00000037) begin
				r[inst_U_rd] <= inst_U_imm;
				`DECODE_DONE;
			
end

// LW
else if ((instruction & 32'h0000707f) == 32'h00002003) begin
				if (decode_step == 0) begin
					// $display("\tLOAD WORD, address <= %x (%b)", r[inst_I_rs1] + $signed(inst_I_imm), o_request);
					o_address <= r[inst_I_rs1] + $signed(inst_I_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tLOAD WORD, data => %x", i_data);
						r[inst_I_rd] <= i_data;
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// LWU
else if ((instruction & 32'h0000707f) == 32'h00006003) begin
				if (decode_step == 0) begin
					o_address <= r[inst_I_rs1] + inst_I_imm;
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (i_ready) begin
						r[inst_I_rd] <= i_data[31:0];
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// MUL
else if ((instruction & 32'hfe00707f) == 32'h02000033) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) * $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
end

// MULH
else if ((instruction & 32'hfe00707f) == 32'h02001033) begin
end

// MULHU
else if ((instruction & 32'hfe00707f) == 32'h02003033) begin
end

// MULHSU
else if ((instruction & 32'hfe00707f) == 32'h02002033) begin
end

// MULW
else if ((instruction & 32'hfe00707f) == 32'h0200003b) begin
end

// MRET
else if ((instruction & 32'hffffffff) == 32'h30200073) begin
end

// OR
else if ((instruction & 32'hfe00707f) == 32'h00006033) begin
				r[inst_R_rd] <= r[inst_R_rs1] | r[inst_R_rs2];
				`DECODE_DONE;
			
end

// ORI
else if ((instruction & 32'h0000707f) == 32'h00006013) begin
				r[inst_I_rd] <= r[inst_I_rs1] | inst_I_imm;
				`DECODE_DONE;
			
end

// REM
else if ((instruction & 32'hfe00707f) == 32'h02006033) begin
end

// REMU
else if ((instruction & 32'hfe00707f) == 32'h02007033) begin
end

// REMUW
else if ((instruction & 32'hfe00707f) == 32'h0200703b) begin
end

// REMW
else if ((instruction & 32'hfe00707f) == 32'h0200603b) begin
end

// SB
else if ((instruction & 32'h0000707f) == 32'h00000023) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tSTORE BYTE, address %x", r[inst_S_rs1] + $signed(inst_S_imm));
					o_address <= r[inst_S_rs1] + $signed(inst_S_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				// 2: patch into word after load finished.
				else if (decode_step == 1) begin
					if (i_ready) begin
						// $display("\tSTORE BYTE, address %x, patch %d, i_data %x", o_address, address_byte, i_data);
						case ( address_byte  )
							2'b00: o_data <= {      i_data[31:24],      i_data[23:16],       i_data[15:8], r[inst_S_rs2][7:0] };
							2'b01: o_data <= {      i_data[31:24],      i_data[23:16], r[inst_S_rs2][7:0],        i_data[7:0] };
							2'b10: o_data <= {      i_data[31:24], r[inst_S_rs2][7:0],       i_data[15:8],        i_data[7:0] };
							2'b11: o_data <= { r[inst_S_rs2][7:0],      i_data[23:16],       i_data[15:8],        i_data[7:0] };
						endcase
						o_request <= 0;
						decode_step <= 2;
					end
				end
				// 3: store 32-bit word into memory.
				else if (decode_step == 2) begin
					o_rw <= 1;
					o_request <= 1;
					decode_step <= 3;
				end
				// 4: wait until store finished.
				else if (decode_step == 3) begin
					if (i_ready) begin
						// $display("\tSTORE BYTE, address %x, patch %d, o_data %x", o_address, address_byte, o_data);
						o_rw <= 0;
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// SC.D
else if ((instruction & 32'hf800707f) == 32'h1800302f) begin
end

// SC.W
else if ((instruction & 32'hf800707f) == 32'h1800202f) begin
end

// SD
else if ((instruction & 32'h0000707f) == 32'h00003023) begin
end

// SFENCE.VMA
else if ((instruction & 32'hfe007fff) == 32'h12000073) begin
end

// SH
else if ((instruction & 32'h0000707f) == 32'h00001023) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tSTORE HALF, address %x", r[inst_S_rs1] + $signed(inst_S_imm));
					o_address <= r[inst_S_rs1] + $signed(inst_S_imm);
					o_rw <= 0;
					o_request <= 1;				
					decode_step <= 1;
				end
				// 2: patch into word after load finished.
				else if (decode_step == 1) begin
					if (i_ready) begin
						case ( address_byte  )
							2'b00: o_data <= {       i_data[31:16], r[inst_S_rs2][15:0] };
							2'b10: o_data <= { r[inst_S_rs2][15:0],        i_data[15:0] };
						endcase
						o_request <= 0;
						decode_step <= 2;
					end
				end
				// 3: store 32-bit word into memory.
				else if (decode_step == 2) begin
					o_rw <= 1;
					o_request <= 1;
					decode_step <= 3;
				end
				// 4: wait until store finished.
				else if (decode_step == 3) begin
					if (i_ready) begin
						o_rw <= 0;
						o_request <= 0;
						`DECODE_DONE;
					end
				end
			
end

// SLL
else if ((instruction & 32'hfe00707f) == 32'h00001033) begin
				r[inst_R_rd] <= r[inst_R_rs1] << r[inst_R_rs2];
				`DECODE_DONE;
			
end

// SLLI
else if ((instruction & 32'hfc00707f) == 32'h00001013) begin
				r[inst_R_rd] <= r[inst_R_rs1] << instruction[25:20];
				`DECODE_DONE;
			
end

// SLLIW
else if ((instruction & 32'hfe00707f) == 32'h0000101b) begin
end

// SLLW
else if ((instruction & 32'hfe00707f) == 32'h0000103b) begin
end

// SLT
else if ((instruction & 32'hfe00707f) == 32'h00002033) begin
				r[inst_R_rd] <= ($signed(r[inst_R_rs1]) < $signed(r[inst_R_rs2])) ? 1 : 0;
				`DECODE_DONE;
			
end

// SLTI
else if ((instruction & 32'h0000707f) == 32'h00002013) begin
				r[inst_I_rd] <= ($signed(r[inst_I_rs1]) < $signed(inst_I_imm)) ? 1 : 0;
				`DECODE_DONE;
			
end

// SLTIU
else if ((instruction & 32'h0000707f) == 32'h00003013) begin
				r[inst_I_rd] <= (r[inst_I_rs1] < inst_I_imm) ? 1 : 0;
				`DECODE_DONE;
			
end

// SLTU
else if ((instruction & 32'hfe00707f) == 32'h00003033) begin
				r[inst_R_rd] <= (r[inst_R_rs1] < r[inst_R_rs2]) ? 1 : 0;
				`DECODE_DONE;
			
end

// SRA
else if ((instruction & 32'hfe00707f) == 32'h40005033) begin
end

// SRAI
else if ((instruction & 32'hfc00707f) == 32'h40005013) begin
				r[inst_R_rd] <= r[inst_R_rs1] >>> instruction[25:20];
				`DECODE_DONE;
			
end

// SRAIW
else if ((instruction & 32'hfc00707f) == 32'h4000501b) begin
end

// SRAW
else if ((instruction & 32'hfe00707f) == 32'h4000503b) begin
end

// SRET
else if ((instruction & 32'hffffffff) == 32'h10200073) begin
end

// SRL
else if ((instruction & 32'hfe00707f) == 32'h00005033) begin
end

// SRLI
else if ((instruction & 32'hfc00707f) == 32'h00005013) begin
				r[inst_R_rd] <= r[inst_R_rs1] >> instruction[25:20];
				`DECODE_DONE;
			
end

// SRLIW
else if ((instruction & 32'hfc00707f) == 32'h0000501b) begin
end

// SRLW
else if ((instruction & 32'hfe00707f) == 32'h0000503b) begin
end

// SUB
else if ((instruction & 32'hfe00707f) == 32'h40000033) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) - $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
end

// SUBW
else if ((instruction & 32'hfe00707f) == 32'h4000003b) begin
end

// SW
else if ((instruction & 32'h0000707f) == 32'h00002023) begin
				if (decode_step == 0) begin
					// $display("\tSTORE WORD, address %x", r[inst_S_rs1] + $signed(inst_S_imm));
					o_address <= r[inst_S_rs1] + $signed(inst_S_imm);
					o_data <= r[inst_S_rs2];
					o_rw <= 1;
					o_request <= 1;				
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (i_ready) begin
						o_rw <= 0;
						o_request <= 0;
						`DECODE_DONE;
					end
				end			
			
end

// URET
else if ((instruction & 32'hffffffff) == 32'h00200073) begin
end

// WFI
else if ((instruction & 32'hffffffff) == 32'h10500073) begin
end

// XOR
else if ((instruction & 32'hfe00707f) == 32'h00004033) begin
				r[inst_R_rd] <= r[inst_R_rs1] ^ r[inst_R_rs2];
				`DECODE_DONE;
			
end

// XORI
else if ((instruction & 32'h0000707f) == 32'h00004013) begin
				r[inst_I_rd] <= r[inst_I_rs1] ^ inst_I_imm;
				`DECODE_DONE;
			
end
