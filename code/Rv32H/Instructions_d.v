// This file is automatically generated, DO NOT EDIT!
// ==================================================
if (is_U) begin

	// AUIPC
	if (is_AUIPC) begin
				r[inst_U_rd] <= $signed(pc) + $signed(inst_U_imm);
				`DECODE_DONE;
			
	end

	// LUI
	else if (is_LUI) begin
				r[inst_U_rd] <= inst_U_imm;
				`DECODE_DONE;
			
	end

end
if (is_R) begin

	// ADD
	if (is_ADD) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) + $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
	end

	// ADDW
	else if (is_ADDW) begin
				r[inst_R_rd] <= r[inst_R_rs1] + r[inst_R_rs2];
				`DECODE_DONE;
			
	end

	// AND
	else if (is_AND) begin
				r[inst_R_rd] <= r[inst_R_rs1] & r[inst_R_rs2];
				`DECODE_DONE;
			
	end

	// MUL
	else if (is_MUL) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) * $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
	end

	// OR
	else if (is_OR) begin
				r[inst_R_rd] <= r[inst_R_rs1] | r[inst_R_rs2];
				`DECODE_DONE;
			
	end

	// SLL
	else if (is_SLL) begin
				r[inst_R_rd] <= r[inst_R_rs1] << r[inst_R_rs2];
				`DECODE_DONE;
			
	end

	// SLLI
	else if (is_SLLI) begin
				r[inst_R_rd] <= r[inst_R_rs1] << instruction[25:20];
				`DECODE_DONE;
			
	end

	// SLT
	else if (is_SLT) begin
				r[inst_R_rd] <= ($signed(r[inst_R_rs1]) < $signed(r[inst_R_rs2])) ? 1 : 0;
				`DECODE_DONE;
			
	end

	// SLTU
	else if (is_SLTU) begin
				r[inst_R_rd] <= (r[inst_R_rs1] < r[inst_R_rs2]) ? 1 : 0;
				`DECODE_DONE;
			
	end

	// SRAI
	else if (is_SRAI) begin
				r[inst_R_rd] <= r[inst_R_rs1] >>> instruction[25:20];
				`DECODE_DONE;
			
	end

	// SRLI
	else if (is_SRLI) begin
				r[inst_R_rd] <= r[inst_R_rs1] >> instruction[25:20];
				`DECODE_DONE;
			
	end

	// SUB
	else if (is_SUB) begin
				r[inst_R_rd] <= $signed(r[inst_R_rs1]) - $signed(r[inst_R_rs2]);
				`DECODE_DONE;
			
	end

	// XOR
	else if (is_XOR) begin
				r[inst_R_rd] <= r[inst_R_rs1] ^ r[inst_R_rs2];
				`DECODE_DONE;
			
	end

end
else if (is_I) begin

	// ADDI
	if (is_ADDI) begin
				r[inst_I_rd] <= $signed(r[inst_I_rs1]) + $signed(inst_I_imm);
				`DECODE_DONE;
			
	end

	// ADDIW
	else if (is_ADDIW) begin
				r[inst_I_rd] <= r[inst_I_rs1] + inst_I_imm;
				`DECODE_DONE;
			
	end

	// ANDI
	else if (is_ANDI) begin
				r[inst_I_rd] <= r[inst_I_rs1] & inst_I_imm;
				`DECODE_DONE;
			
	end

	// JALR
	else if (is_JALR) begin
				r[inst_I_rd] <= pc + 4;
				`GOTO($signed(r[inst_I_rs1]) + $signed(inst_I_imm));
				`DECODE_DONE;
			
	end

	// LB
	else if (is_LB) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tLOAD BYTE, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					`MEM_READ_REQ(r[inst_I_rs1] + $signed(inst_I_imm));
					decode_step <= 1;
				end
				// 2: wait until load finish.
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						$display("\tLOAD BYTE, address <= %x, data => %x (%d)", r[inst_I_rs1] + $signed(inst_I_imm), i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= $signed({ { 24{ i_data[7]  } }, i_data[6:0] });
							2'b01: r[inst_I_rd] <= $signed({ { 24{ i_data[15] } }, i_data[14:8] });
							2'b10: r[inst_I_rd] <= $signed({ { 24{ i_data[23] } }, i_data[22:16] });
							2'b11: r[inst_I_rd] <= $signed({ { 24{ i_data[31] } }, i_data[30:24] });
						endcase
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// LBU
	else if (is_LBU) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tLOAD UBYTE, address %x", r[inst_I_rs1] + $signed(inst_I_imm));
					`MEM_READ_REQ(r[inst_I_rs1] + $signed(inst_I_imm));
					decode_step <= 1;
				end
				// 2: wait until load finish.
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						// $display("\tLOAD UBYTE, data => %x (%d)", i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { 24'b0, i_data[7:0] };
							2'b01: r[inst_I_rd] <= { 24'b0, i_data[15:8] };
							2'b10: r[inst_I_rd] <= { 24'b0, i_data[23:16] };
							2'b11: r[inst_I_rd] <= { 24'b0, i_data[31:24] };
						endcase
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// LH
	else if (is_LH) begin
				if (decode_step == 0) begin
					// $display("\tLOAD SHALF, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					`MEM_READ_REQ(r[inst_I_rs1] + $signed(inst_I_imm));
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						// $display("\tLOAD HALF, data => %x (%d)", i_data, address_byte);
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { { 16{ i_data[15] } }, i_data[14:0] };
							2'b10: r[inst_I_rd] <= { { 16{ i_data[31] } }, i_data[30:16] };
						endcase
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// LHU
	else if (is_LHU) begin
				if (decode_step == 0) begin
					// $display("\tLOAD HALF, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					`MEM_READ_REQ(r[inst_I_rs1] + $signed(inst_I_imm));
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						// $display("\tLOAD HALF, data => %x (%d)", i_data, address_byte);
						r[inst_I_rd] <= i_data[15:0];
						case ( address_byte  )
							2'b00: r[inst_I_rd] <= { 16'b0, i_data[15:0] };
							2'b10: r[inst_I_rd] <= { 16'b0, i_data[31:16] };
						endcase
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// LW
	else if (is_LW) begin
				if (decode_step == 0) begin
					$display("\tLOAD WORD, address <= %x", r[inst_I_rs1] + $signed(inst_I_imm));
					`MEM_READ_REQ(r[inst_I_rs1] + $signed(inst_I_imm));
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						$display("\tLOAD WORD, data => %x", i_data);
						r[inst_I_rd] <= i_data;
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// LWU
	else if (is_LWU) begin
				if (decode_step == 0) begin
					`MEM_READ_REQ(r[inst_I_rs1] + inst_I_imm);
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						r[inst_I_rd] <= i_data[31:0];
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// ORI
	else if (is_ORI) begin
				r[inst_I_rd] <= r[inst_I_rs1] | inst_I_imm;
				`DECODE_DONE;
			
	end

	// SLTI
	else if (is_SLTI) begin
				r[inst_I_rd] <= ($signed(r[inst_I_rs1]) < $signed(inst_I_imm)) ? 1 : 0;
				`DECODE_DONE;
			
	end

	// SLTIU
	else if (is_SLTIU) begin
				r[inst_I_rd] <= (r[inst_I_rs1] < inst_I_imm) ? 1 : 0;
				`DECODE_DONE;
			
	end

	// XORI
	else if (is_XORI) begin
				r[inst_I_rd] <= r[inst_I_rs1] ^ inst_I_imm;
				`DECODE_DONE;
			
	end

end
else if (is_B) begin

	// BEQ
	if (is_BEQ) begin
				if (r[inst_B_rs1] == r[inst_B_rs2])
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

	// BGE
	else if (is_BGE) begin
				if ($signed(r[inst_B_rs1]) >= $signed(r[inst_B_rs2]))
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

	// BGEU
	else if (is_BGEU) begin
				if (r[inst_B_rs1] >= r[inst_B_rs2])
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

	// BLT
	else if (is_BLT) begin
				if ($signed(r[inst_B_rs1]) < $signed(r[inst_B_rs2]))
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

	// BLTU
	else if (is_BLTU) begin
				if (r[inst_B_rs1] < r[inst_B_rs2])
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

	// BNE
	else if (is_BNE) begin
				if (r[inst_B_rs1] != r[inst_B_rs2])
					`GOTO($signed(pc) + $signed(inst_B_imm));
				`DECODE_DONE;
			
	end

end
else if (is_S) begin

	// SB
	if (is_SB) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tSTORE BYTE, address %x", r[inst_S_rs1] + $signed(inst_S_imm));
					`MEM_READ_REQ(r[inst_S_rs1] + $signed(inst_S_imm));
					decode_step <= 1;
				end
				// 2: patch into word after load finished.
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						$display("\tSTORE BYTE, address %x, patch %d, i_data %x, value %x", o_address, address_byte, i_data, r[inst_S_rs2][7:0]);
						case ( address_byte  )
							2'b00: o_data <= {      i_data[31:24],      i_data[23:16],       i_data[15:8], r[inst_S_rs2][7:0] };
							2'b01: o_data <= {      i_data[31:24],      i_data[23:16], r[inst_S_rs2][7:0],        i_data[7:0] };
							2'b10: o_data <= {      i_data[31:24], r[inst_S_rs2][7:0],       i_data[15:8],        i_data[7:0] };
							2'b11: o_data <= { r[inst_S_rs2][7:0],      i_data[23:16],       i_data[15:8],        i_data[7:0] };
						endcase
						`BUS_REQUEST_END;
						decode_step <= 2;
					end
				end
				// 3: store 32-bit word into memory.
				else if (decode_step == 2) begin
					`BUS_WRITE;
					`BUS_REQUEST_START;
					decode_step <= 3;
				end
				// 4: wait until store finished.
				else if (decode_step == 3) begin
					if (`BUS_READY) begin
						// $display("\tSTORE BYTE, address %x, patch %d, o_data %x", o_address, address_byte, o_data);
						`BUS_READ;
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// SH
	else if (is_SH) begin
				// 1: fetch 32-bit word from memory.
				if (decode_step == 0) begin
					// $display("\tSTORE HALF, address %x", r[inst_S_rs1] + $signed(inst_S_imm));
					`MEM_READ_REQ(r[inst_S_rs1] + $signed(inst_S_imm));
					decode_step <= 1;
				end
				// 2: patch into word after load finished.
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						case ( address_byte  )
							2'b00: o_data <= {       i_data[31:16], r[inst_S_rs2][15:0] };
							2'b10: o_data <= { r[inst_S_rs2][15:0],        i_data[15:0] };
						endcase
						`BUS_REQUEST_END;
						decode_step <= 2;
					end
				end
				// 3: store 32-bit word into memory.
				else if (decode_step == 2) begin
					`BUS_WRITE;
					`BUS_REQUEST_START;
					decode_step <= 3;
				end
				// 4: wait until store finished.
				else if (decode_step == 3) begin
					if (`BUS_READY) begin
						`BUS_READ;
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end
			
	end

	// SW
	else if (is_SW) begin
				if (decode_step == 0) begin
					$display("\tSTORE WORD, address %x, value %x", r[inst_S_rs1] + $signed(inst_S_imm), r[inst_S_rs2]);
					`MEM_WRITE_REQ(r[inst_S_rs1] + $signed(inst_S_imm), r[inst_S_rs2]);
					decode_step <= 1;
				end
				else if (decode_step == 1) begin
					if (`BUS_READY) begin
						`BUS_READ;
						`BUS_REQUEST_END;
						`DECODE_DONE;
					end
				end			
			
	end

end
else if (is_J) begin

	// JAL
	if (is_JAL) begin
				r[inst_J_rd] <= pc + 4;
				`GOTO($signed(pc) + $signed(inst_J_imm));
				`DECODE_DONE;
			
	end

end

// EBREAK
	if (is_EBREAK) begin
			$finish;
		
end
