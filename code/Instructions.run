
-- https://github.com/takahirox/riscv-rust/blob/master/src/cpu.rs

local insttype = {
	ARITHMETIC = "ARITHMETIC",
	SHIFT = "SHIFT",
	COMPARE = "COMPARE",
	JUMP = "JUMP",
	JUMP_CONDITIONAL = "JUMP_CONDITIONAL",
	MEMORY = "MEMORY",
	COMPLEX = "COMPLEX",
	FPU = "FPU",
}

local operations = {
	SIGNED_ADD = "`OP_SIGNED_ADD",
	UNSIGNED_ADD = "`OP_UNSIGNED_ADD",
	SIGNED_SUB = "`OP_SIGNED_SUB",
	AND = "`OP_AND",
	OR = "`OP_OR",
	XOR = "`OP_XOR",
	SHIFT_LEFT = "`OP_SHIFT_LEFT",
	SHIFT_RIGHT = "`OP_SHIFT_RIGHT",
	ARITHMETIC_SHIFT_RIGHT = "`OP_ARITHMETIC_SHIFT_RIGHT",
	SIGNED_LESS_THAN = "`OP_SIGNED_LESS_THAN",
	UNSIGNED_LESS_THAN = "`OP_UNSIGNED_LESS_THAN",
	EQUAL = "`OP_EQUAL",
	NOT_EQUAL = "`OP_NOT_EQUAL",
	SIGNED_GREATER_EQUAL = "`OP_SIGNED_GREATER_EQUAL",
	UNSIGNED_GREATER_EQUAL = "`OP_UNSIGNED_GREATER_EQUAL",
}

local fpu_operations = {
	ADD = "`FPU_OP_ADD",
	SUB = "`FPU_OP_SUB",
	MUL = "`FPU_OP_MUL",
	DIV = "`FPU_OP_DIV",
	INT = "`FPU_OP_INT"
}

local operands = {
	RS1 = "`RS1",
	RS2 = "`RS2",
	IMM = "`IMM",
	PC = "`PC",
	ZERO = "`ZERO"
}

local instructions = {
	{
		mask = 0xfe00707f,
		data = 0x00000033,
		name = "ADD",
		format = "R",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) + R_s(f.rs2);
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00000013,
		name = "ADDI",
		format = "I",
		type = insttype.ARITHMETIC,
        cpp = [[
			auto f = parseFormatI(word);
			R_s(f.rd) = R_s(f.rs1) + f.imm;
        ]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0x0000707f,
		data = 0x0000001b,
		name = "ADDIW",
		format = "I"
	},
	{
		mask = 0xfe00707f,
		data = 0x0000003b,
		name = "ADDW",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0000302f,
		name = "AMOADD.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0000202f,
		name = "AMOADD.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x6000302f,
		name = "AMOAND.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x6000202f,
		name = "AMOAND.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0xe000302f,
		name = "AMOMAXU.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0xe000202f,
		name = "AMOMAXU.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x4000302f,
		name = "AMOOR.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x4000202f,
		name = "AMOOR.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0800302f,
		name = "AMOSWAP.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0800202f,
		name = "AMOSWAP.W",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x00007033,
		name = "AND",
		format = "R",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) & R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.AND,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00007013,
		name = "ANDI",
		format = "I",
 		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) & f.imm;
        ]],
		verilog_alu = {
			operation = operations.AND,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0x0000007f,
		data = 0x00000017,
		name = "AUIPC",
		format = "U",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatU(word);
			R_u(f.rd) = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.PC,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00000063,
		name = "BEQ",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) == R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.EQUAL,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00005063,
		name = "BGE",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) >= R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.SIGNED_GREATER_EQUAL,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00007063,
		name = "BGEU",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_u(f.rs1) >= R_u(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.UNSIGNED_GREATER_EQUAL,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00004063,
		name = "BLT",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) < R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.SIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00006063,
		name = "BLTU",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_u(f.rs1) < R_u(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.UNSIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00001063,
		name = "BNE",
		format = "B",
		type = insttype.JUMP_CONDITIONAL,
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) != R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.NOT_EQUAL,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00003073,
		name = "CSRRC",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatCSR(word);
			uint32_t data = readCSR(f.csr);
			uint32_t tmp = R_u(f.rs1);
			R_u(f.rd) = data;
			writeCSR(f.csr, R_u(f.rd) & !tmp);
		]],
		verilog_text = [[
			`RD <= i_csr_rdata;
			o_csr_wdata <= i_csr_rdata & !`RS1;
			o_csr_wdata_wr <= 1;
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00007073,
		name = "CSRRCI",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			log::info << L"CSRRCI" << Endl;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00002073,
		name = "CSRRS",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatCSR(word);
			uint32_t data = readCSR(f.csr);
			uint32_t tmp = R_u(f.rs1);
			R_u(f.rd) = data;
			writeCSR(f.csr, R_u(f.rd) | tmp);
		]],
		verilog_text = [[
			`RD <= i_csr_rdata;
			o_csr_wdata <= i_csr_rdata | `RS1;
			o_csr_wdata_wr <= 1;
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00006073,
		name = "CSRRSI",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			log::info << L"CSRRSI" << Endl;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00001073,
		name = "CSRRW",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatCSR(word);
			R_s(f.rd) = readCSR(f.csr);
			writeCSR(f.csr, R_s(f.rs1));
		]],
		verilog_text = [[
			`RD <= i_csr_rdata;
			o_csr_wdata <= `RS1;
			o_csr_wdata_wr <= 1;
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00005073,
		name = "CSRRWI",
		format = "CSR",
		cpp = [[
			log::info << L"CSRRWI" << Endl;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02004033,
		name = "DIV",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			int32_t dividend = R_s(f.rs1);
			int32_t divisor = R_s(f.rs2);
			if (divisor == 0)
				R_s(f.rd) = -1;
			else if (dividend == -std::numeric_limits< int32_t >::max() && divisor == -1)
				R_s(f.rd) = dividend;
			else
				R_s(f.rd) = dividend / divisor;
		]],
		verilog_text = [[
			if (`CYCLE == `DIV_CYCLE_LATENCY) begin
				`RD <= div_result[31:0];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02005033,
		name = "DIVU",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			uint32_t dividend = R_u(f.rs1);
			uint32_t divisor = R_u(f.rs2);
			if (divisor ==  0)
				R_s(f.rd) = -1;
			else		
				R_u(f.rd) = dividend / divisor;
		]],
		verilog_text = [[
			if (`CYCLE == `DIV_CYCLE_LATENCY) begin
				`RD <= div_result[31:0];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0200503b,
		name = "DIVUW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0200403b,
		name = "DIVW",
		format = "R"
	},
	{
		mask = 0xffffffff,
		data = 0x00100073,
		name = "EBREAK",
		type = insttype.COMPLEX,
		cpp = [[
			return false;
		]],
		verilog_text = [[
			`FAULT <= 1'b1;
		]]
	},
	{
		mask = 0xffffffff,
		data = 0x00000073,
		name = "ECALL",
		type = insttype.COMPLEX,
		cpp = [[
		]],
		verilog_text = [[
			`ECALL <= 1'b1;
			`EXECUTE_DONE;
		]]
	},

	{
		-- 1111 111x xxxx xxxx xxxx xxxx x1111111
		mask = 0xfe00007f,
		-- xxxx x00x xxxx xxxx xxxx xxxx x101 0011
		data = 0x00000053,
		name = "FADD",
		format = "R",
		type = insttype.FPU,
		verilog_fpu = {
			operation = fpu_operations.ADD
		}
	},

	{
		mask = 0xfe00007f,
		data = 0x02000053,
		name = "FADD.D",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2200053,
		name = "FCVT.D.L",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0x42000053,
		name = "FCVT.D.S",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2000053,
		name = "FCVT.D.W",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2100053,
		name = "FCVT.D.WU",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0x40100053,
		name = "FCVT.S.D",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xc2000053,
		name = "FCVT.W.D",
		format = "R"
	},

	{
		-- 1111 111x xxxx xxxx xxxx xxxx x111 1111
		mask = 0xfe00007f,
		-- xxxx x00x xxxx xxxx xxxx xxxx x101 0011
		data = 0xc0000053,
		name = "FCVT_W",
		format = "R",
		type = insttype.FPU,
		verilog_fpu = {
			operation = fpu_operations.INT
		}
	},

	{
		mask = 0xfe00007f,
		data = 0x1a000053,
		name = "FDIV.D",
		format = "R"
	},
	{
		-- 1111 111x xxxx xxxx xxxx xxxx x111 1111
		mask = 0xfe00007f,
		-- xxxx x00x xxxx xxxx xxxx xxxx x101 0011
		data = 0x18000053,
		name = "FDIV",
		format = "R",
		type = insttype.FPU,
		verilog_fpu = {
			operation = fpu_operations.DIV
		}
	},

	{
		mask = 0x0000707f,
		data = 0x0000000f,
		name = "FENCE",
		format = "I",
		type = insttype.COMPLEX,
		verilog_text = [[
			`MEM_FLUSH <= 1;
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x0000100f,
		name = "FENCE.I",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0xa2002053,
		name = "FEQ.D",
		format = ""
	},
	{
		mask = 0x0000707f,
		data = 0x00003007,
		name = "FLD",
		format = "I"
	},
	{
		mask = 0xfe00707f,
		data = 0xa2000053,
		name = "FLE.D",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0xa2001053,
		name = "FLT.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002007,
		name = "FLW",
		format = "I"
	},
	{
		mask = 0x0600007f,
		data = 0x02000043,
		name = "FMADD.D",
		format = "R"
	},
	{
		mask = 0xfe00007f,
		data = 0x12000053,
		name = "FMUL.D",
		format = "R"
	},
	{
		-- 1111 111x xxxx xxxx xxxx xxxx x111 1111
		mask = 0xfe00007f,
		-- xxxx x00x xxxx xxxx xxxx xxxx x101 0011
		data = 0x10000053,
		name = "FMUL",
		format = "R",
		type = insttype.FPU,
		verilog_fpu = {
			operation = fpu_operations.MUL
		}
	},

	{
		mask = 0xfff0707f,
		data = 0xf2000053,
		name = "FMV.D.X",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xe2000053,
		name = "FMV.X.D",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xe0000053,
		name = "FMV.X.W",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xf0000053,
		name = "FMV.W.X",
		format = "R"
	},
	{
		mask = 0x0600007f,
		data = 0x0200004b,
		name = "FNMSUB.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00003027,
		name = "FSD",
		format = "S"
	},
	{
		mask = 0xfe00707f,
		data = 0x22000053,
		name = "FSGNJ.D",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x22002053,
		name = "FSGNJX.D",
		format = "R"
	},

	{
		-- 1111 111x xxxx xxxx xxxx xxxx x111 1111
		mask = 0xfe00007f,
		-- xxxx x00x xxxx xxxx xxxx xxxx x101 0011
		data = 0x08000053,
		name = "FSUB",
		format = "R",
		type = insttype.FPU,
		verilog_fpu = {
			operation = fpu_operations.SUB
		}
	},
	{
		mask = 0xfe00007f,
		data = 0x0a000053,
		name = "FSUB.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002027,
		name = "FSW",
		format = "S"
	},
	{
		mask = 0x0000007f,
		data = 0x0000006f,
		name = "JAL",
		format = "J",
		type = insttype.JUMP,
		cpp = [[
			auto f = parseFormatJ(word);
			R_u(f.rd) = PC_NEXT;
			PC_NEXT = PC + f.imm;
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.PC,
			operand2 = operands.IMM
		},
		verilog_text = [[
			`RD <= `PC + 4;
			`GOTO(alu_result);
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000067,
		name = "JALR",
		format = "I",
		type = insttype.JUMP,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = PC_NEXT;
			PC_NEXT = R(f.rs1) + f.imm;
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_text = [[
			`RD <= `PC + 4;
			`GOTO(alu_result & ~1);
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000003,
		name = "LB",
		format = "I",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatI(word);
			R_s(f.rd) = (int8_t)MEM_RD_U8(R_u(f.rs1) + f.imm);
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "R",
			width = 1,
			signed = true
		},
	},
	{
		mask = 0x0000707f,
		data = 0x00004003,
		name = "LBU",
		format = "I",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = MEM_RD_U8(R_u(f.rs1) + f.imm);
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "R",
			width = 1,
			signed = false
		},
	},
	{
		mask = 0x0000707f,
		data = 0x00003003,
		name = "LD",
		format = "I"
	},
	{
		mask = 0x0000707f,
		data = 0x00001003,
		name = "LH",
		format = "I",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatI(word);
			R_s(f.rd) = (int16_t)MEM_RD_U16(R_u(f.rs1) + f.imm);
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "R",
			width = 2,
			signed = true
		},
	},
	{
		mask = 0x0000707f,
		data = 0x00005003,
		name = "LHU",
		format = "I",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = MEM_RD_U16(R(f.rs1) + f.imm);			
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "R",
			width = 2,
			signed = false
		},
	},
	{
		mask = 0xf9f0707f,
		data = 0x1000302f,
		name = "LR.D",
		format = "R"
	},
	{
		mask = 0xf9f0707f,
		data = 0x1000202f,
		name = "LR.W",
		format = "R"
	},
	{
		mask = 0x0000007f,
		data = 0x00000037,
		name = "LUI",
		format = "U",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatU(word);
			R_s(f.rd) = f.imm;
		]],
		verilog_alu = {
			operation = operations.UNSIGNED_ADD,
			operand1 = operands.IMM,
			operand2 = operands.ZERO
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00002003,
		name = "LW",
		format = "I",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatI(word);
			R_s(f.rd) = (int32_t)MEM_RD(R_u(f.rs1) + f.imm);
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "R",
			width = 4,
			signed = false
		},
	},
	{
		mask = 0x0000707f,
		data = 0x00006003,
		name = "LWU",
		format = "I"
	},
	{
		mask = 0xfe00707f,
		data = 0x02000033,
		name = "MUL",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) * R_s(f.rs2);
		]],
		verilog_text = [[
			if (`CYCLE == `MUL_CYCLE_LATENCY) begin
				`RD <= mul_result[31:0];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02001033,
		name = "MULH",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			int64_t lh = (int64_t)R_s(f.rs1);
			int64_t rh = (int64_t)R_s(f.rs2);
			R_s(f.rd) = (lh * rh) >> 32;
		]],
		verilog_text = [[
			if (`CYCLE == `MUL_CYCLE_LATENCY) begin
				`RD <= mul_result[63:32];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02003033,
		name = "MULHU",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			uint64_t lh = (uint64_t)R(f.rs1);
			uint64_t rh = (uint64_t)R(f.rs2);
			R(f.rd) = (lh * rh) >> 32;
		]],
		verilog_text = [[
			if (`CYCLE == `MUL_CYCLE_LATENCY) begin
				`RD <= mul_result[63:32];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02002033,
		name = "MULHSU",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0200003b,
		name = "MULW",
		format = "R"
	},
	{
		mask = 0xffffffff,
		data = 0x30200073,
		name = "MRET",
		-- format = "M",
		format = "CSR",
		type = insttype.COMPLEX,
		cpp = [[
			PC_NEXT = readCSR(CSR::MEPC);
			log::info << L"MRET " << str(L"%08x", PC_NEXT) << Endl;
		]],
		verilog_text = [[
			`GOTO(`MEPC);
			`EXECUTE_DONE;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x00006033,
		name = "OR",
		format = "R",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) | R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.OR,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00006013,
		name = "ORI",
		format = "I",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) | f.imm;
		]],
		verilog_alu = {
			operation = operations.OR,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0xfe00707f,
		data = 0x02006033,
		name = "REM",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			int32_t dividend = R_s(f.rs1);
			int32_t divisor = R_s(f.rs2);
			if (divisor == 0)
				R_s(f.rd) = dividend;
			else
				R_s(f.rd) = dividend % divisor;
		]],
		verilog_text = [[
			if (`CYCLE == `DIV_CYCLE_LATENCY) begin
				`RD <= div_remainder[31:0];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02007033,
		name = "REMU",
		format = "R",
		type = insttype.COMPLEX,
		cpp = [[
			auto f = parseFormatR(word);
			uint32_t dividend = R_u(f.rs1);
			uint32_t divisor = R_u(f.rs2);
			if (divisor == 0)
				R_u(f.rd) = dividend;
			else
				R_u(f.rd) = dividend % divisor;
		]],
		verilog_text = [[
			if (`CYCLE == `DIV_CYCLE_LATENCY) begin
				`RD <= div_remainder[31:0];
				`EXECUTE_DONE;
			end
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0200703b,
		name = "REMUW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0200603b,
		name = "REMW",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00000023,
		name = "SB",
		format = "S",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR_U8(R_u(f.rs1) + f.imm, (uint8_t)R_u(f.rs2));
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "W",
			width = 1,
			signed = false
		},
	},
	{
		mask = 0xf800707f,
		data = 0x1800302f,
		name = "SC.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x1800202f,
		name = "SC.W",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00003023,
		name = "SD",
		format = "S"
	},
	{
		mask = 0xfe007fff,
		data = 0x12000073,
		name = "SFENCE.VMA",
		format = ""
	},
	{
		mask = 0x0000707f,
		data = 0x00001023,
		name = "SH",
		format = "S",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR_U16(R_u(f.rs1) + f.imm, R_u(f.rs2));
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "W",
			width = 2,
			signed = false
		},
	},
	{
		mask = 0xfe00707f,
		data = 0x00001033,
		name = "SLL",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) << R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.SHIFT_LEFT,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0xfc00707f,
		data = 0x00001013,
		name = "SLLI",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) << ((word >> 20) & 0x1f);
		]],
		verilog_alu = {
			operation = operations.SHIFT_LEFT,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0xfe00707f,
		data = 0x0000101b,
		name = "SLLIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0000103b,
		name = "SLLW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x00002033,
		name = "SLT",
		format = "R",
		type = insttype.COMPARE,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = (R_s(f.rs1) < R_s(f.rs2)) ? 1 : 0;
		]],
		verilog_alu = {
			operation = operations.SIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00002013,
		name = "SLTI",
		format = "I",
		type = insttype.COMPARE,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = (R_s(f.rs1) < f.imm) ? 1 : 0;
		]],
		verilog_alu = {
			operation = operations.SIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00003013,
		name = "SLTIU",
		format = "I",
		type = insttype.COMPARE,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = (R_u(f.rs1) < f.imm) ? 1 : 0;
		]],
		verilog_alu = {
			operation = operations.UNSIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0xfe00707f,
		data = 0x00003033,
		name = "SLTU",
		format = "R",
		type = insttype.COMPARE,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = (R_u(f.rs1) < R_u(f.rs2)) ? 1 : 0;
		]],
		verilog_alu = {
			operation = operations.UNSIGNED_LESS_THAN,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0xfe00707f,
		data = 0x40005033,
		name = "SRA",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) >> R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.ARITHMETIC_SHIFT_RIGHT,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0xfc00707f,
		data = 0x40005013,
		name = "SRAI",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) >> ((word >> 20) & 0x1f);
		]],
		verilog_alu = {
			operation = operations.ARITHMETIC_SHIFT_RIGHT,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0xfc00707f,
		data = 0x4000501b,
		name = "SRAIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x4000503b,
		name = "SRAW",
		format = "R"
	},
	{
		mask = 0xffffffff,
		data = 0x10200073,
		name = "SRET",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0x00005033,
		name = "SRL",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) >> R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.SHIFT_RIGHT,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0xfc00707f,
		data = 0x00005013,
		name = "SRLI",
		format = "R",
		type = insttype.SHIFT,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) >> ((word >> 20) & 0x1f);
		]],
		verilog_alu = {
			operation = operations.SHIFT_RIGHT,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
	{
		mask = 0xfc00707f,
		data = 0x0000501b,
		name = "SRLIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0000503b,
		name = "SRLW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x40000033,
		name = "SUB",
		format = "R",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) - R_s(f.rs2);
		]],
		verilog_alu = {
			operation = operations.SIGNED_SUB,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0xfe00707f,
		data = 0x4000003b,
		name = "SUBW",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002023,
		name = "SW",
		format = "S",
		type = insttype.MEMORY,
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR(R_u(f.rs1) + f.imm, R_u(f.rs2));
		]],
		verilog_alu = {
			operation = operations.SIGNED_ADD,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		},
		verilog_memory = {
			direction = "W",
			width = 4,
			signed = false
		},
	},
	{
		mask = 0xffffffff,
		data = 0x00200073,
		name = "URET",
		format = ""
	},
	{
		mask = 0xffffffff,
		data = 0x10500073,
		name = "WFI",
		format = "",
		type = insttype.COMPLEX,
		cpp = [[
			m_waitForInterrupt = true;
		]],
		verilog = true
	},
	{
		mask = 0xfe00707f,
		data = 0x00004033,
		name = "XOR",
		format = "R",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) ^ R_u(f.rs2);
		]],
		verilog_alu = {
			operation = operations.XOR,
			operand1 = operands.RS1,
			operand2 = operands.RS2
		}
	},
	{
		mask = 0x0000707f,
		data = 0x00004013,
		name = "XORI",
		format = "I",
		type = insttype.ARITHMETIC,
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) ^ f.imm;
		]],
		verilog_alu = {
			operation = operations.XOR,
			operand1 = operands.RS1,
			operand2 = operands.IMM
		}
	},
}

local function trim(s)
   return s:match'^%s*(.*%S)' or ''
end

local function lines(s)
	if s:sub(-1)~="\n" then s=s.."\n" end
	return string.gmatch(s,'[^\r\n]+')
end

local function iter2tbl(it)
	local t = {}
	for i in it do table.insert(t, i) end
	return t
end

local function indent(s)
	local count = 0
	for i = 1, #s do
		if s:sub(i, i) ~= "\t" then break end
		count = count + 1
	end
	return count
end

function main(argv)

	local language = argv:get(0)
	local debug = false

	if language == "cpp" then

		for i, inst in ipairs(instructions) do
			assert((inst.mask & inst.data) == inst.data)
			if i > 1 then stdout:print("else if") else stdout:print("if") end
			stdout:printLn(" ((word & 0x" .. string.format("%08x", inst.mask) .. ") == 0x" .. string.format("%08x", inst.data) .. ")")
			stdout:printLn("{")
			stdout:printLn("\tTRACE(L\"\t" .. inst.name .. "\");")
			if inst.cpp ~= nil then
				stdout:printLn(inst.cpp)
				stdout:printLn("\treturn true;")
			else
				stdout:printLn("\tlog::error << L\"Not implemented.\" << Endl;")
				stdout:printLn("\treturn false;")
			end
			stdout:printLn("}")
		end
		stdout:printLn("else")
		stdout:printLn("{")
		stdout:printLn("\tlog::error << L\"Unknown instruction.\" << Endl;")
		stdout:printLn("\treturn false;")
		stdout:printLn("}")

	elseif language == "verilog_inst_wire" then
		local P < const > = { "B", "I", "J", "R", "S", "U", "CSR" }

		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")

		-- Get all verilog instructions.
		local vi = {}
		for _, inst in ipairs(instructions) do
			if inst.verilog ~= nil or inst.verilog_alu ~= nil or inst.verilog_text ~= nil or inst.verilog_fpu ~= nil then
				table.insert(vi, inst)
			end
		end

		-- Instruction signals.
		for _, inst in ipairs(vi) do
			stdout:printLn("wire is_" .. string.format("%-6s", inst.name) .. " = ((`INSTRUCTION & 32'h" .. string.format("%08x", inst.mask) .. ") == 32'h" .. string.format("%08x", inst.data) .. ");")
		end
		stdout:printLn("")

		-- Format signals.
		for _, prefix in ipairs(P) do
			local t = {}
			for i, inst in ipairs(vi) do
				if inst.format == prefix then
					table.insert(t, inst)
				end
			end
			if #t > 0 then
				stdout:print("wire is_" .. prefix .. " =")
				for i, inst in ipairs(t) do
					if i > 1 then stdout:print(" |") end
					stdout:print(" is_" .. inst.name)
				end
				stdout:printLn(";")
			else
				stdout:printLn("wire is_" .. prefix .. " = 1'b0;")
			end
		end
		stdout:printLn("")

		-- Instruction type signals.
		for _, it in pairs({
			insttype.ARITHMETIC,
			insttype.SHIFT,
			insttype.COMPARE,
			insttype.COMPLEX,
			insttype.JUMP,
			insttype.JUMP_CONDITIONAL,
			insttype.MEMORY,
			insttype.FPU,
			insttype.FPU_CVT
		}) do
			stdout:print("wire is_" .. it .. " =")
			local count = 0
			for _, inst in ipairs(vi) do
				assert(inst.type ~= nil);
				if inst.type == it then
					if count > 0 then stdout:print(" |") end
					stdout:print(" is_" .. inst.name)
					count = count + 1
				end
			end
			stdout:printLn(";")
		end

	elseif language == "verilog_alu" then
		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")

		-- Get list of all instructions with an ALU specification.
		local alu = {}
		for i, inst in ipairs(instructions) do
			if inst.verilog_alu ~= nil then
				table.insert(alu, inst)
			end
		end

		stdout:printLn("wire [3:0] alu_operation = ")
		for i, inst in ipairs(alu) do
			stdout:printLn("\tis_" .. string.format("%-5s", inst.name) .. " ? " .. string.format("%-26s", inst.verilog_alu.operation) .. " :")
		end
		stdout:printLn("\t4'd0;")
		stdout:printLn("")

		stdout:printLn("wire [2:0] alu_operand1 = ")
		for i, inst in ipairs(alu) do
			stdout:printLn("\tis_" .. string.format("%-5s", inst.name) .. " ? " .. string.format("%-5s", inst.verilog_alu.operand1) .. " :")
		end
		stdout:printLn("\t3'd0;")
		stdout:printLn("")

		stdout:printLn("wire [2:0] alu_operand2 = ")
		for i, inst in ipairs(alu) do
			stdout:printLn("\tis_" .. string.format("%-5s", inst.name) .. " ? " .. string.format("%-5s", inst.verilog_alu.operand2) .. " :")
		end
		stdout:printLn("\t3'd0;")
		stdout:printLn("")

	elseif language == "verilog_memory" then
		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")

		-- Get list of all instructions with a MEMORY specification.
		local alu = {}
		for i, inst in ipairs(instructions) do
			if inst.verilog_memory ~= nil then
				table.insert(alu, inst)
			end
		end

		stdout:printLn("wire memory_read = ")
		for i, inst in ipairs(alu) do
			if inst.verilog_memory.direction == "R" then
				stdout:printLn("\tis_" .. string.format("%-5s", inst.name) .. "|")
			end
		end
		stdout:printLn("\t1'b0;")
		stdout:printLn("")

		stdout:printLn("wire memory_write = ")
		for i, inst in ipairs(alu) do
			if inst.verilog_memory.direction == "W" then
				stdout:printLn("\tis_" .. string.format("%-4s", inst.name) .. " |")
			end
		end
		stdout:printLn("\t1'b0;")
		stdout:printLn("")

		stdout:printLn("wire [2:0] memory_width = ")
		for i, inst in ipairs(alu) do
			stdout:printLn("\tis_" .. string.format("%-4s", inst.name) .. " ? 3'd" .. inst.verilog_memory.width .. " :")
		end
		stdout:printLn("\t3'd0;")
		stdout:printLn("")

		stdout:printLn("wire memory_signed = ")
		for i, inst in ipairs(alu) do
			if inst.verilog_memory.signed == true then
				stdout:printLn("\tis_" .. string.format("%-4s", inst.name) .. " |")
			end
		end
		stdout:printLn("\t1'b0;")
		stdout:printLn("")

	elseif language == "verilog_ops" then
		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")
		
		-- Get all verilog instructions.
		local vi = {}
		for _, inst in ipairs(instructions) do
			if inst.verilog_alu ~= nil or inst.verilog_text ~= nil then
				table.insert(vi, inst)
			end
		end

		-- Collect COMPEX instructions.
		local t = {}
		for _, inst in ipairs(vi) do
			if inst.type == insttype.COMPLEX then
				table.insert(t, inst)
			end
		end	
		
		local nbits = math.ceil(math.log(#t) / math.log(2))

		for i, inst in ipairs(t) do
			stdout:printLn("localparam OP_" .. string.format("%-6s", inst.name) .. " = " .. nbits .. "'d" .. i .. ";")
		end

	elseif language == "verilog_decode_ops" then

		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")
		
		-- Get all verilog instructions.
		local vi = {}
		for _, inst in ipairs(instructions) do
			if inst.verilog_alu ~= nil or inst.verilog_text ~= nil then
				table.insert(vi, inst)
			end
		end

		-- Collect COMPEX instructions.
		local t = {}
		for _, inst in ipairs(vi) do
			if inst.type == insttype.COMPLEX then
				table.insert(t, inst)
			end
		end	
		
		local count = 0;
		for i, inst in ipairs(t) do
			if count == 0 then
				stdout:printLn("if (is_" .. inst.name .. ")")
			else
				stdout:printLn("else if (is_" .. inst.name .. ")")
			end
			stdout:printLn("\t`OP <= OP_" .. inst.name .. ";")
			count = count + 1
		end

	elseif language == "verilog_execute_ops" then

		local formats = nil
		if argv.size > 1 then
			formats = {}
			for i = 1, argv.size - 1 do
				formats[argv:get(i)] = true
			end
		end

		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")
		
		-- Get all verilog instructions.
		local vi = {}
		for _, inst in ipairs(instructions) do
			if inst.verilog_alu ~= nil or inst.verilog_text ~= nil then
				table.insert(vi, inst)
			end
		end

		-- Collect COMPEX instructions.
		local t = {}
		for _, inst in ipairs(vi) do
			if inst.type == insttype.COMPLEX then
				if inst.format == nil or formats == nil or formats[inst.format] == true then
					table.insert(t, inst)
				end
			end
		end
		
		local count = 0;
		for i, inst in ipairs(t) do
			
			if count == 0 then
				stdout:printLn("// " .. inst.name)
				stdout:printLn("if (`EXECUTE_OP == OP_" .. inst.name ..") begin")
			else
				stdout:printLn("")
				stdout:printLn("// " .. inst.name)
				stdout:printLn("else if (`EXECUTE_OP == OP_" .. inst.name ..") begin")
			end

			if debug then
				stdout:printLn("\t$display(\"" .. inst.name .. "\");")
			end

			local lns = iter2tbl(lines(inst.verilog_text))
			while #lns > 0 and trim(lns[1]) == "" do
				table.remove(lns, 1)
			end
			while #lns > 0 and trim(lns[#lns]) == "" do
				table.remove(lns, #lns)
			end
			local ind = 80
			for _, ln in pairs(lns) do
				ind = math.min(ind, indent(ln))
			end
			for _, ln in pairs(lns) do
				stdout:printLn("\t" .. ln:sub(ind + 1))
			end

			stdout:printLn("end")

			count = count + 1
		end

	elseif language == "verilog_fpu" then
		stdout:printLn("// This file is automatically generated, DO NOT EDIT!")
		stdout:printLn("// ==================================================")
		stdout:printLn("")

		-- Get list of all instructions with an FPU specification.
		local fpu = {}
		for i, inst in ipairs(instructions) do
			if inst.verilog_fpu ~= nil then
				table.insert(fpu, inst)
			end
		end

		stdout:printLn("wire [3:0] fpu_operation = ")
		for i, inst in ipairs(fpu) do
			stdout:printLn("\tis_" .. string.format("%-6s", inst.name) .. " ? " .. string.format("%-1s", inst.verilog_fpu.operation) .. " :")
		end
		stdout:printLn("\t4'd0;")
		stdout:printLn("")

	else
		stderr:printLn("Unknown language \"" .. language .. "\".")
	end
end
