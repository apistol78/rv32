<!--

-- https://github.com/takahirox/riscv-rust/blob/master/src/cpu.rs

local instructions = {
	{
		mask = 0xfe00707f,
		data = 0x00000033,
		name = "ADD",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) + R_s(f.rs2);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000013,
		name = "ADDI",
		format = "I",
        cpp = [[
			auto f = parseFormatI(word);
			R_s(f.rd) = R_s(f.rs1) + f.imm;
        ]]
	},
	{
		mask = 0x0000707f,
		data = 0x0000001b,
		name = "ADDIW",
		format = "I",
        cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = R(f.rs1) + f.imm;
        ]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0000003b,
		name = "ADDW",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R(f.rd) = R(f.rs1) + R(f.rs2);
		]]
	},
	{
		mask = 0xf800707f,
		data = 0x0000302f,
		name = "AMOADD.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0000202f,
		name = "AMOADD.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x6000302f,
		name = "AMOAND.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x6000202f,
		name = "AMOAND.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0xe000302f,
		name = "AMOMAXU.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0xe000202f,
		name = "AMOMAXU.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x4000302f,
		name = "AMOOR.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x4000202f,
		name = "AMOOR.W",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0800302f,
		name = "AMOSWAP.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x0800202f,
		name = "AMOSWAP.W",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x00007033,
		name = "AND",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) & R_u(f.rs2);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00007013,
		name = "ANDI",
		format = "I",
        cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) & f.imm;
        ]]
	},
	{
		mask = 0x0000007f,
		data = 0x00000017,
		name = "AUIPC",
		format = "U",
		cpp = [[
			auto f = parseFormatU(word);
			R_u(f.rd) = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000063,
		name = "BEQ",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) == R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00005063,
		name = "BGE",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) >= R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00007063,
		name = "BGEU",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_u(f.rs1) >= R_u(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00004063,
		name = "BLT",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) < R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00006063,
		name = "BLTU",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_u(f.rs1) < R_u(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00001063,
		name = "BNE",
		format = "B",
		cpp = [[
			auto f = parseFormatB(word);
			if (R_s(f.rs1) != R_s(f.rs2))
				PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00003073,
		name = "CSRRC",
		format = "CSR"
	},
	{
		mask = 0x0000707f,
		data = 0x00007073,
		name = "CSRRCI",
		format = "CSR"
	},
	{
		mask = 0x0000707f,
		data = 0x00002073,
		name = "CSRRS",
		format = "CSR"
	},
	{
		mask = 0x0000707f,
		data = 0x00006073,
		name = "CSRRSI",
		format = "CSR"
	},
	{
		mask = 0x0000707f,
		data = 0x00001073,
		name = "CSRRW",
		format = "CSR"
	},
	{
		mask = 0x0000707f,
		data = 0x00005073,
		name = "CSRRWI",
		format = "CSR"
	},
	{
		mask = 0xfe00707f,
		data = 0x02004033,
		name = "DIV",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) / R_s(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02005033,
		name = "DIVU",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) / R_u(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0200503b,
		name = "DIVUW",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) / R_u(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0200403b,
		name = "DIVW",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R(f.rd) = R(f.rs1) / R(f.rs2);
		]]
	},
	{
		mask = 0xffffffff,
		data = 0x00100073,
		name = "EBREAK",
		format = ""
	},
	{
		mask = 0xffffffff,
		data = 0x00000073,
		name = "ECALL",
		format = "",
		cpp = [[
		]]
	},
	{
		mask = 0xfe00007f,
		data = 0x02000053,
		name = "FADD.D",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2200053,
		name = "FCVT.D.L",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0x42000053,
		name = "FCVT.D.S",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2000053,
		name = "FCVT.D.W",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xd2100053,
		name = "FCVT.D.WU",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0x40100053,
		name = "FCVT.S.D",
		format = "R"
	},
	{
		mask = 0xfff0007f,
		data = 0xc2000053,
		name = "FCVT.W.D",
		format = "R"
	},
	{
		mask = 0xfe00007f,
		data = 0x1a000053,
		name = "FDIV.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x0000000f,
		name = "FENCE",
		format = ""
	},
	{
		mask = 0x0000707f,
		data = 0x0000100f,
		name = "FENCE.I",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0xa2002053,
		name = "FEQ.D",
		format = ""
	},
	{
		mask = 0x0000707f,
		data = 0x00003007,
		name = "FLD",
		format = "I"
	},
	{
		mask = 0xfe00707f,
		data = 0xa2000053,
		name = "FLE.D",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0xa2001053,
		name = "FLT.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002007,
		name = "FLW",
		format = "I_mem"
	},
	{
		mask = 0x0600007f,
		data = 0x02000043,
		name = "FMADD.D",
		format = "R"
	},
	{
		mask = 0xfe00007f,
		data = 0x12000053,
		name = "FMUL.D",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xf2000053,
		name = "FMV.D.X",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xe2000053,
		name = "FMV.X.D",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xe0000053,
		name = "FMV.X.W",
		format = "R"
	},
	{
		mask = 0xfff0707f,
		data = 0xf0000053,
		name = "FMV.W.X",
		format = "R"
	},
	{
		mask = 0x0600007f,
		data = 0x0200004b,
		name = "FNMSUB.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00003027,
		name = "FSD",
		format = "S"
	},
	{
		mask = 0xfe00707f,
		data = 0x22000053,
		name = "FSGNJ.D",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x22002053,
		name = "FSGNJX.D",
		format = "R"
	},
	{
		mask = 0xfe00007f,
		data = 0x0a000053,
		name = "FSUB.D",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002027,
		name = "FSW",
		format = "S"
	},
	{
		mask = 0x0000007f,
		data = 0x0000006f,
		name = "JAL",
		format = "J",
		cpp = [[
			auto f = parseFormatJ(word);
			R_u(f.rd) = PC_NEXT;
			PC_NEXT = PC + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000067,
		name = "JALR",
		format = "",
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = PC_NEXT;
			PC_NEXT = R(f.rs1) + f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00000003,
		name = "LB",
		format = "I_mem"
	},
	{
		mask = 0x0000707f,
		data = 0x00004003,
		name = "LBU",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = MEM_RD_U8(R(f.rs1) + f.imm);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00003003,
		name = "LD",
		format = "I_mem"
	},
	{
		mask = 0x0000707f,
		data = 0x00001003,
		name = "LH",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = MEM_RD_U16(R(f.rs1) + f.imm);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00005003,
		name = "LHU",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = MEM_RD_U16(R(f.rs1) + f.imm);			
		]]
	},
	{
		mask = 0xf9f0707f,
		data = 0x1000302f,
		name = "LR.D",
		format = "R"
	},
	{
		mask = 0xf9f0707f,
		data = 0x1000202f,
		name = "LR.W",
		format = "R"
	},
	{
		mask = 0x0000007f,
		data = 0x00000037,
		name = "LUI",
		format = "U",
		cpp = [[
			auto f = parseFormatU(word);
			R_s(f.rd) = f.imm;
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00002003,
		name = "LW",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R(f.rd) = MEM_RD(R(f.rs1) + f.imm);
		]]		
	},
	{
		mask = 0x0000707f,
		data = 0x00006003,
		name = "LWU",
		format = "I_mem"
	},
	{
		mask = 0xfe00707f,
		data = 0x02000033,
		name = "MUL",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) * R_s(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02001033,
		name = "MULH",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x02003033,
		name = "MULHU",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			uint64_t lh = (uint64_t)R(f.rs1);
			uint64_t rh = (uint64_t)R(f.rs2);
			R(f.rd) = (lh * rh) >> 32;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02002033,
		name = "MULHSU",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0200003b,
		name = "MULW",
		format = "R"
	},
	{
		mask = 0xffffffff,
		data = 0x30200073,
		name = "MRET",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0x00006033,
		name = "OR",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) | R_u(f.rs2);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00006013,
		name = "ORI",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) | f.imm;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x02006033,
		name = "REM",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x02007033,
		name = "REMU",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) % R_u(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0200703b,
		name = "REMUW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0200603b,
		name = "REMW",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00000023,
		name = "SB",
		format = "S",
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR_U8(R_u(f.rs1) + f.imm, (uint8_t)R_u(f.rs2));
		]]
	},
	{
		mask = 0xf800707f,
		data = 0x1800302f,
		name = "SC.D",
		format = "R"
	},
	{
		mask = 0xf800707f,
		data = 0x1800202f,
		name = "SC.W",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00003023,
		name = "SD",
		format = "S"
	},
	{
		mask = 0xfe007fff,
		data = 0x12000073,
		name = "SFENCE.VMA",
		format = ""
	},
	{
		mask = 0x0000707f,
		data = 0x00001023,
		name = "SH",
		format = "S",
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR_U16(R_u(f.rs1) + f.imm, R_u(f.rs2));
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x00001033,
		name = "SLL",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) << R_u(f.rs2);
		]]
	},
	{
		mask = 0xfc00707f,
		data = 0x00001013,
		name = "SLLI",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) << ((word >> 20) & 0x1f);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x0000101b,
		name = "SLLIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0000103b,
		name = "SLLW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x00002033,
		name = "SLT",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002013,
		name = "SLTI",
		format = "I"
	},
	{
		mask = 0x0000707f,
		data = 0x00003013,
		name = "SLTIU",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = (R_u(f.rs1) < R(f.imm)) ? 1 : 0;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x00003033,
		name = "SLTU",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = (R_u(f.rs1) < R_u(f.rs2)) ? 1 : 0;
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x40005033,
		name = "SRA",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = (R_s(f.rs1) >> R_u(f.rs2)) ? 1 : 0;
		]]
	},
	{
		mask = 0xfc00707f,
		data = 0x40005013,
		name = "SRAI",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) >> ((word >> 20) & 0x1f);
		]]
	},
	{
		mask = 0xfc00707f,
		data = 0x4000501b,
		name = "SRAIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x4000503b,
		name = "SRAW",
		format = "R"
	},
	{
		mask = 0xffffffff,
		data = 0x10200073,
		name = "SRET",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0x00005033,
		name = "SRL",
		format = "R"
	},
	{
		mask = 0xfc00707f,
		data = 0x00005013,
		name = "SRLI",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) >> ((word >> 20) & 0x1f);
		]]
	},
	{
		mask = 0xfc00707f,
		data = 0x0000501b,
		name = "SRLIW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x0000503b,
		name = "SRLW",
		format = "R"
	},
	{
		mask = 0xfe00707f,
		data = 0x40000033,
		name = "SUB",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_s(f.rd) = R_s(f.rs1) - R_s(f.rs2);
		]]
	},
	{
		mask = 0xfe00707f,
		data = 0x4000003b,
		name = "SUBW",
		format = "R"
	},
	{
		mask = 0x0000707f,
		data = 0x00002023,
		name = "SW",
		format = "S",
		cpp = [[
			auto f = parseFormatS(word);
			MEM_WR(R_u(f.rs1) + f.imm, R_u(f.rs2));
		]]
	},
	{
		mask = 0xffffffff,
		data = 0x00200073,
		name = "URET",
		format = ""
	},
	{
		mask = 0xffffffff,
		data = 0x10500073,
		name = "WFI",
		format = ""
	},
	{
		mask = 0xfe00707f,
		data = 0x00004033,
		name = "XOR",
		format = "R",
		cpp = [[
			auto f = parseFormatR(word);
			R_u(f.rd) = R_u(f.rs1) ^ R_u(f.rs2);
		]]
	},
	{
		mask = 0x0000707f,
		data = 0x00004013,
		name = "XORI",
		format = "I",
		cpp = [[
			auto f = parseFormatI(word);
			R_u(f.rd) = R_u(f.rs1) ^ f.imm;
		]]
	},
}

-- C++
for i, inst in ipairs(instructions) do
    assert((inst.mask & inst.data) == inst.data)
    if i > 1 then output:print("else if") else output:print("if") end
    output:printLn(" ((word & 0x" .. string.format("%08x", inst.mask) .. ") == 0x" .. string.format("%08x", inst.data) .. ")")
    output:printLn("{")
	if inst.cpp ~= nil then
		output:printLn("\tTRACE(L\"" .. inst.name .. "\");")
        output:printLn(inst.cpp)
		output:printLn("return true;")
	else
		output:printLn("\tlog::error << L\"" .. inst.name .. " (not implemented)\" << Endl;")
		output:printLn("return false;")
    end
    output:printLn("}")
end
output:printLn("else")
output:printLn("{")
output:printLn("\tlog::error << L\"Unknown instruction.\" << Endl;")
output:printLn("}")

--!>